-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public."user"
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY,
    username character varying(25) NOT NULL,
    email character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    last_login date,
    is_superuser integer NOT NULL,
    is_staff integer NOT NULL,
    PRIMARY KEY (id),
    CONSTRAINT user_unique UNIQUE (username, email)
);

CREATE TABLE IF NOT EXISTS public.recipe
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY,
    recipe_name character varying(75) NOT NULL,
    person_count integer NOT NULL,
    prep_description character varying(1000) NOT NULL,
    cooking_duration_min integer NOT NULL,
    user_id bigint,
    PRIMARY KEY (id),
    UNIQUE (recipe_name)
);

CREATE TABLE IF NOT EXISTS public.ingredient
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY,
    ingredient_name character varying(50) NOT NULL,
    default_price numeric(7, 2) NOT NULL,
    search_description character varying(100),
    ingredient_display_name character varying(50) NOT NULL,
    quantity_per_unit numeric(7, 2) NOT NULL,
    unit_id bigint NOT NULL,
    is_spices integer NOT NULL DEFAULT 0,
    PRIMARY KEY (id),
    UNIQUE (ingredient_name)
);

CREATE TABLE IF NOT EXISTS public.recipe_ingredient
(
    recipe_id bigint NOT NULL,
    ingredient_id bigint NOT NULL,
    unit_quantity numeric(7, 2) NOT NULL,
    PRIMARY KEY (recipe_id, ingredient_id)
);

CREATE TABLE IF NOT EXISTS public.unit
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY,
    unit_name character varying(20) NOT NULL,
    PRIMARY KEY (id),
    UNIQUE (unit_name)
);

CREATE TABLE IF NOT EXISTS public.tag
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY,
    tag_name character varying(25) NOT NULL,
    PRIMARY KEY (id),
    UNIQUE (tag_name)
);

CREATE TABLE IF NOT EXISTS public.recipe_tag
(
    recipe_id bigint NOT NULL,
    tag_id bigint NOT NULL,
    PRIMARY KEY (recipe_id, tag_id)
);

CREATE TABLE IF NOT EXISTS public.recipe_favorite
(
    user_id bigint NOT NULL,
    recipe_id bigint NOT NULL,
    PRIMARY KEY (user_id, recipe_id)
);

CREATE TABLE IF NOT EXISTS public.watchlist
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY,
    watchlist_name character varying NOT NULL,
    user_id bigint NOT NULL,
    PRIMARY KEY (id),
    UNIQUE (watchlist_name)
);

CREATE TABLE IF NOT EXISTS public.recipe_watchlist
(
    watchlist_id bigint NOT NULL,
    recipe_id bigint NOT NULL,
    PRIMARY KEY (watchlist_id, recipe_id)
);

CREATE TABLE IF NOT EXISTS public.recipe_rating
(
    user_id bigint NOT NULL,
    recipe_id bigint NOT NULL,
    rating numeric(2, 1) NOT NULL,
    PRIMARY KEY (user_id, recipe_id)
);

CREATE TABLE IF NOT EXISTS public.day_time
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY,
    day_time_name character varying(10) NOT NULL,
    PRIMARY KEY (id),
    UNIQUE (day_time_name)
);

CREATE TABLE IF NOT EXISTS public.recipe_cart
(
    user_id bigint NOT NULL,
    date date NOT NULL,
    day_time_id bigint,
    recipe_name character varying NOT NULL,
    food_shop_id bigint,
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.food_shop
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY,
    shop_name character varying NOT NULL,
    address character varying(75) NOT NULL,
    zip_code character varying(10) NOT NULL,
    shop_comment character varying(255),
    city character varying(100) NOT NULL,
    PRIMARY KEY (id),
    UNIQUE (shop_name)
);

CREATE TABLE IF NOT EXISTS public.food_shop_area
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY,
    food_shop_id bigint NOT NULL,
    area_name character varying(100) NOT NULL,
    area_order_number integer NOT NULL,
    PRIMARY KEY (food_shop_id, area_order_number),
    UNIQUE (id)
);

CREATE TABLE IF NOT EXISTS public.food_shop_area_part_ingredient
(
    ingredient_id bigint NOT NULL,
    area_part_id bigint NOT NULL,
    ingredient_price numeric(7, 2) NOT NULL,
    PRIMARY KEY (ingredient_id, area_part_id)
);

CREATE TABLE IF NOT EXISTS public.recipe_image
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY,
    recipe_id bigint NOT NULL,
    image_path character varying(255) NOT NULL,
    PRIMARY KEY (id),
    UNIQUE (image_path)
);

CREATE TABLE IF NOT EXISTS public.food_shop_area_part
(
    area_id bigint NOT NULL,
    area_part_order_number integer NOT NULL,
    area_part_name character varying(100) NOT NULL,
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY,
    PRIMARY KEY (area_id, area_part_order_number),
    UNIQUE (id)
);

CREATE TABLE IF NOT EXISTS public.recipe_cart_ingredient
(
    shopping_cart_recipe_id bigint NOT NULL,
    ingredient_id bigint NOT NULL,
    buy_unit_quantity integer NOT NULL,
    is_buyed integer DEFAULT 0,
    PRIMARY KEY (shopping_cart_recipe_id, ingredient_id)
);

CREATE TABLE IF NOT EXISTS public.preferred_user_food_shop
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY,
    user_id bigint NOT NULL,
    food_shop_id bigint,
    PRIMARY KEY (id),
    UNIQUE (user_id)
);

ALTER TABLE IF EXISTS public.recipe
    ADD FOREIGN KEY (user_id)
    REFERENCES public."user" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL
    NOT VALID;


ALTER TABLE IF EXISTS public.ingredient
    ADD FOREIGN KEY (unit_id)
    REFERENCES public.unit (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.recipe_ingredient
    ADD FOREIGN KEY (recipe_id)
    REFERENCES public.recipe (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.recipe_ingredient
    ADD FOREIGN KEY (ingredient_id)
    REFERENCES public.ingredient (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.recipe_tag
    ADD FOREIGN KEY (recipe_id)
    REFERENCES public.recipe (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.recipe_tag
    ADD FOREIGN KEY (tag_id)
    REFERENCES public.tag (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.recipe_favorite
    ADD FOREIGN KEY (user_id)
    REFERENCES public."user" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.recipe_favorite
    ADD FOREIGN KEY (recipe_id)
    REFERENCES public.recipe (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.watchlist
    ADD FOREIGN KEY (user_id)
    REFERENCES public."user" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.recipe_watchlist
    ADD FOREIGN KEY (watchlist_id)
    REFERENCES public.watchlist (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.recipe_watchlist
    ADD FOREIGN KEY (recipe_id)
    REFERENCES public.recipe (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.recipe_rating
    ADD FOREIGN KEY (user_id)
    REFERENCES public."user" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.recipe_rating
    ADD FOREIGN KEY (recipe_id)
    REFERENCES public.recipe (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.recipe_cart
    ADD FOREIGN KEY (day_time_id)
    REFERENCES public.day_time (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL
    NOT VALID;


ALTER TABLE IF EXISTS public.recipe_cart
    ADD FOREIGN KEY (food_shop_id)
    REFERENCES public.food_shop (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.food_shop_area
    ADD FOREIGN KEY (food_shop_id)
    REFERENCES public.food_shop (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.food_shop_area_part_ingredient
    ADD FOREIGN KEY (ingredient_id)
    REFERENCES public.ingredient (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.food_shop_area_part_ingredient
    ADD FOREIGN KEY (area_part_id)
    REFERENCES public.food_shop_area_part (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.recipe_image
    ADD FOREIGN KEY (recipe_id)
    REFERENCES public.recipe (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.food_shop_area_part
    ADD FOREIGN KEY (area_id)
    REFERENCES public.food_shop_area (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.recipe_cart_ingredient
    ADD FOREIGN KEY (shopping_cart_recipe_id)
    REFERENCES public.recipe_cart (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.recipe_cart_ingredient
    ADD FOREIGN KEY (ingredient_id)
    REFERENCES public.ingredient (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public.preferred_user_food_shop
    ADD FOREIGN KEY (user_id)
    REFERENCES public."user" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.preferred_user_food_shop
    ADD FOREIGN KEY (food_shop_id)
    REFERENCES public.food_shop (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;